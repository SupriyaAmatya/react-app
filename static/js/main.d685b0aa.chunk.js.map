{"version":3,"sources":["compoments/Informations.js","compoments/AddInformation.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Informations","informations","deleteInformation","informationList","editInformation","length","map","information","className","key","id","name","address","age","onClick","AddInformation","state","handleOnChange","e","setState","target","value","handleOnSubmit","preventDefault","props","addInformation","onSubmit","this","htmlFor","type","onChange","required","Component","App","selectedItem","uuid","filter","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8UAmCeA,G,MA/BM,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,kBAC9BC,GADsE,EAArBC,gBAC/BH,EAAaI,OAAUJ,EAAaK,KAAI,SAAAC,GAC5D,OACE,yBAAKC,UAAU,cAAcC,IAAKF,EAAYG,IAC5C,sCAAaH,EAAYI,MACzB,yCAAgBJ,EAAYK,SAC5B,qCAAYL,EAAYM,KACxB,4BAAQC,QAAU,WAAQZ,EAAkBK,EAAYG,KAAQF,UAAU,iBAA1E,cAKF,uBAAGA,UAAU,oBAAb,0BAYN,OACE,yBAAKA,UAAU,8BACXL,K,QCqCOY,E,4MAhEbC,MAAM,CACJL,KAAM,GACNC,QAAS,GACTC,IAAK,I,EAGPI,eAAiB,SAACC,GAChB,EAAKC,SAAL,eACGD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAI5BC,eAAiB,SAACJ,GAChBA,EAAEK,iBACF,EAAKC,MAAMC,eAAe,EAAKT,OAC/B,EAAKG,SAAS,CACZR,KAAM,GACNC,QAAS,GACTC,IAAK,M,uDAKP,OACE,yBAAML,UAAU,aACd,0BAAMkB,SAAUC,KAAKL,gBACnB,2BAAOM,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOnB,GAAG,OAAOoB,SAAUH,KAAKV,eAAgBI,MAAOM,KAAKX,MAAML,KAAMoB,UAAQ,IAC5F,2BAAOH,QAAQ,QAAf,aACA,2BAAOC,KAAK,OAAOnB,GAAG,UAAUoB,SAAUH,KAAKV,eAAgBI,MAAOM,KAAKX,MAAMJ,QAASmB,UAAQ,IAClG,2BAAOH,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOnB,GAAG,MAAMoB,SAAUH,KAAKV,eAAgBI,MAAOM,KAAKX,MAAMH,IAAKkB,UAAQ,IAC1F,gD,GAjCmBC,aC+DdC,E,4MAxDbjB,MAAM,CACJf,aAAa,CACX,CAACU,KAAM,UAAWC,QAAS,aAAcC,IAAK,GAAIH,GAAI,IAExDwB,aAAa,I,EAGfT,eAAiB,SAAClB,GAChBA,EAAYG,GAAKyB,MACjB,IAAIlC,EAAY,sBAAO,EAAKe,MAAMf,cAAlB,CAAgCM,IAChD,EAAKY,SAAS,CACZlB,aAAcA,K,EAIlBC,kBAAoB,SAACQ,GACnB,IAAIT,EAAe,EAAKe,MAAMf,aAAamC,QAAO,SAAA7B,GAChD,OAAOA,EAAYG,KAAOA,KAE5B,EAAKS,SAAS,CACZlB,aAAcA,K,uDAchB,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK6B,IAAKC,IAAM9B,UAAU,WAAW+B,IAAI,SACzC,mDACA,0CAGF,6BAAS/B,UAAU,aACjB,kBAAC,EAAD,CAAgBiB,eAAkBE,KAAKF,iBACvC,kBAAC,EAAD,CAAcvB,kBAAoByB,KAAKzB,kBAAoBD,aAAe0B,KAAKX,MAAMf,gBAGvF,gCACE,oE,GAjDQ+B,aCIEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.d685b0aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Informations.css';\r\n\r\nconst Informations = ({ informations, deleteInformation, editInformation }) =>{\r\n  const informationList = informations.length ? (informations.map(information => {\r\n      return(\r\n        <div className=\"information\" key={information.id}>\r\n          <div>Name: { information.name }</div>\r\n          <div>Address: { information.address }</div>\r\n          <div>Age: { information.age }</div>\r\n          <button onClick={ () => { deleteInformation(information.id) } } className=\"delete-button\">Delete</button>\r\n          {/* <button onClick={ () => { editInformation(information.id) } } className=\"edit-button\">Edit</button> */}\r\n        </div>\r\n      )\r\n    })\r\n   ) : (<p className=\"empty-list-title\">No informations left!</p>);\r\n\r\n  // const informationList = informations.map(information => {\r\n  //   return information.age >22 ? (\r\n  //     <div className=\"information\" key={information.id}>\r\n  //       <div>Name: { information.name }</div>\r\n  //       <div>Address: { information.address }</div>\r\n  //       <div>Age: { information.age }</div>\r\n  //       <button onClick={deleteInformation}>Delete</button>\r\n  //     </div>\r\n  //   ) : null;\r\n  // })\r\n  return(\r\n    <div className=\"information-list container\">\r\n      { informationList }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Informations;","import React, { Component } from 'react';\r\n\r\nclass AddInformation extends Component{\r\n  state={\r\n    name: \"\",\r\n    address: \"\",\r\n    age: \"\"\r\n  }\r\n\r\n  handleOnChange = (e) =>{\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n\r\n  handleOnSubmit = (e) =>{\r\n    e.preventDefault();\r\n    this.props.addInformation(this.state);\r\n    this.setState({\r\n      name: \"\",\r\n      address: \"\",\r\n      age: \"\"\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div  className=\"container\">\r\n        <form onSubmit={this.handleOnSubmit}>\r\n          <label htmlFor=\"name\">Name: </label>\r\n          <input type=\"text\" id=\"name\" onChange={this.handleOnChange} value={this.state.name} required/>\r\n          <label htmlFor=\"name\">Address: </label>\r\n          <input type=\"text\" id=\"address\" onChange={this.handleOnChange} value={this.state.address} required/>\r\n          <label htmlFor=\"name\">Age: </label>\r\n          <input type=\"text\" id=\"age\" onChange={this.handleOnChange} value={this.state.age} required/>\r\n          <button>Submit</button>\r\n        </form>\r\n\r\n        {/* <form onSubmit={this.handleOnSubmit}>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n              <input id=\"name\" type=\"text\" className=\"validate\" onChange={this.handleOnChange} />\r\n              <label className=\"active\" htmlFor=\"name\">Name</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n              <input id=\"address\" type=\"text\" className=\"validate\" onChange={this.handleOnChange} />\r\n              <label className=\"active\" htmlFor=\"name\">Address</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n              <input id=\"age\" type=\"text\" className=\"validate\" onChange={this.handleOnChange} />\r\n              <label className=\"active\" htmlFor=\"name\">Age</label>\r\n            </div>\r\n          </div>\r\n          <div className='row'>\r\n            <button>Submit</button>\r\n          </div>\r\n        </form> */}\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddInformation;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport uuid from \"uuid\";\n\nimport Informations from './compoments/Informations';\nimport AddInformation from './compoments/AddInformation';\n\nclass App extends Component{\n  state={\n    informations:[\n      {name: 'Supriya', address: 'Shankhamul', age: 22, id: 1 }\n    ],\n    selectedItem:''\n  }\n\n  addInformation = (information) =>{\n    information.id = uuid();\n    let informations = [...this.state.informations, information];\n    this.setState({\n      informations: informations\n    });\n  }\n\n  deleteInformation = (id) => {\n    let informations = this.state.informations.filter(information => {\n      return information.id !== id\n    })\n    this.setState({\n      informations: informations\n    })\n  }\n\n  // componentDidMount(){\n  //   console.log(\"component mounted\");\n  // }\n\n  // componentDidUpdate(prevProps, prevState){\n  //   console.log('compnent updated');\n  //   console.log(prevProps, prevState);\n  // }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>My First React App!</h1>\n          <p>Welcome :)</p>\n        </header>\n        \n        <section className=\"container\">\n          <AddInformation addInformation = {this.addInformation} />\n          <Informations deleteInformation={ this.deleteInformation } informations={ this.state.informations } />\n        </section>\n        \n        <footer>\n          <p>React App 2020 | Supriya Amatya</p>\n        </footer>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}